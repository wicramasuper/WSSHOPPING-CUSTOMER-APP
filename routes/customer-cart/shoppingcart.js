//import router method from express
const router= require("express").Router();

//import model and assign to variable
let shoppingcart = require("../../models/customer-cart/shoppingcart");

//http://localhost:9000/shoppingcart/add
//route:/add
//decription:pass data from front end to back end, can use get method here as well
//           (create) add new item to shopping cart
//parameter:none
//request body: shopping cart objects

router.route("/add").post((req,res) =>{
      
      const itemname= req.body.itemname;
      const userid= req.body.userid;
      const quantity= Number(req.body.quantity);
      const price= Number(req.body.price);
    
      //send data to object
      const newshoppingcart= new shoppingcart({
         
          itemname,
          userid,
          quantity,
          price,
      })
     //javascript promise(successful/unsuccessful)
      newshoppingcart.save().then(()=>{
          //return response in json format
          res.json("Item added to shopping cart")
      }).catch((err)=>{
          console.log(err);
      })
})

//http://localhost:9000/shoppingcart
//route:/
//description: retrieve student details
//parameter:
 router.route("/").get((req,res)=>{
     shoppingcart.find().then((shoppingcart)=>{
         res.json(shoppingcart)
     }).catch((err)=>{
         console.log(err)
     })
 })

//http://localhost:9000/shoppingcart/update/itemid(1234) 
//route:/update/:id
//description: update item (change item in shopping cart)
//parameter: itemid (id autogenerated)
//request body: shoppingcart
//uses async function to control multiple promise requests without clashing
router.route("/update/:id").put(async(req,res)=>{
    let itemid= req.params.id;
    //destructure:assigning values from front end ,like create method
    const{itemname, userid, quantity, price}=req.body;
    
    const updateshcart={
        itemname,
         userid, 
         quantity, 
         price
    }
    //check if that id exists
    //await-wait until promise returns
    
   const updateshc=await shoppingcart.findByIdAndUpdate(itemid, updateshcart)
   .then(()=>{
    res.status(200).send({status: "user updated"})
   }).catch((err)=>{
       console.log(err);
       res.status(500).send({status: "Error with updating data", error: err.message});
   })
})   
    
   //http://localhost:9000/shoppingcart/delete/1234 
//route:/delete/:id
//description: delete item from cart
//parameter: itemid (id autogenerated)
//request body: shoppingcart

router.route("/delete/:id").delete(async(req,res)=>{
    let itemid= req.params.id;

    await shoppingcart.findByIdAndDelete(itemid)
    .then(()=> {
        res.status(200).send({status: "user deleted"});
    }).catch((err)=>{
        console.log(err.message);
        res.status(500).send({status: "Error when deleting item", error:err.message});
    })
})
   
//http://localhost:9000/shoppingcart/delete/1234 
//route:/delete/:id
//description: get details for 1 id
//parameter: itemid (id autogenerated)
//request body: shoppingcart

/* 
   router.route("/get/:id").get(async (req,res)=>{
       let itemid= req.params.id;
       const item=await shoppingcart.findById(itemid)
       .then((shoppingcart)=>{
           res.status(200).send({status:"item data fetched", shoppingcart})
       }).catch(()=>{
           console.log(err.message);
           res.status(500).send({status: "Error with get item", error: err.message});
       })
   })
*/


//export module
module.exports= router;