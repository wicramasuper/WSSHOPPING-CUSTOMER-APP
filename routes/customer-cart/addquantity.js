//import router method from express
const router= require("express").Router();

//import model and assign to variable
let addquantity = require("../../models/customer-cart/addquantity");

//http://localhost:9000/addquantity/add
//route:/add
//decription:pass data from front end to back end, can use get method here as well
//           (create) add quantity to shopping cart
//parameter:none
//request body: addquantity objects

router.route("/add").post((req,res) =>{
      
      const itemname= req.body.itemname;
      const userid= req.body.userid;
      const  losequantity= Number(req.body.losequantity);
      const prequantity= Number(req.body.prequantity);
    
      //send data to object
      const newaddquantity= new addquantity({
         
          itemname,
          userid,
          losequantity,
          prequantity,
      })
     //javascript promise(successful/unsuccessful)
      newaddquantity.save().then(()=>{
          //return response in json format
          res.json("Item added to Shopping Cart")
      }).catch((err)=>{
          console.log(err);
      })
})

//http://localhost:9000/shoppingcart
//route:/
//description: retrieve item-quantity details
//parameter:
 router.route("/").get((req,res)=>{
     addquantity.find().then((addquantity)=>{
         res.json(addquantity)
     }).catch((err)=>{
         console.log(err)
     })
 })

//http://localhost:9000/shoppingcart/update/itemid(1234) 
//route:/update/:id
//description: update item (change item in addquantity)
//parameter: itemid (id autogenerated)
//request body: addquantity
//uses async function to control multiple promise requests without clashing
router.route("/update/:id").put(async(req,res)=>{
    let id= req.params.id;
    //destructure:assigning values from front end ,like create method
    const{ losequantity, prequantity}=req.body;
    
    const updateaq={
         
         losequantity, 
         prequantity
    }
    //check if that id exists
    //await-wait until promise returns
    
   const updateq=await addquantity.findByIdAndUpdate(id, updateaq)
   .then(()=>{
    res.status(200).send({status: "user updated"})
   }).catch((err)=>{
       console.log(err);
       res.status(500).send({status: "Error with updating data", error: err.message});
   })
})   
    
   //http://localhost:9000/shoppingcart/delete/1234 
//route:/delete/:id
//description: delete item from addquantity
//parameter: itemid (id autogenerated)
//request body: addquantity

router.route("/delete/:id").delete(async(req,res)=>{
    let itemid= req.params.id;

    await addquantity.findByIdAndDelete(itemid)
    .then(()=> {
        res.status(200).send({status: "user deleted"});
    }).catch((err)=>{
        console.log(err.message);
        res.status(500).send({status: "Error when deleting item", error:err.message});
    })
})
   
//http://localhost:9000/shoppingcart/delete/1234 
//route:/delete/:id
//description: get details for 1 id
//parameter: itemid (id autogenerated)
//request body: shoppingcart

/* 
   router.route("/get/:id").get(async (req,res)=>{
       let itemid= req.params.id;
       const item=await shoppingcart.findById(itemid)
       .then((shoppingcart)=>{
           res.status(200).send({status:"item data fetched", shoppingcart})
       }).catch(()=>{
           console.log(err.message);
           res.status(500).send({status: "Error with get item", error: err.message});
       })
   })
*/


//export module
module.exports= router;